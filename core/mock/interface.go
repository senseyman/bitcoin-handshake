// Code generated by MockGen. DO NOT EDIT.
// Source: core/interface.go
//
// Generated by this command:
//
//	mockgen -package mock -source core/interface.go -destination core/mock/interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	bytes "bytes"
	context "context"
	io "io"
	reflect "reflect"

	model "github.com/senseyman/bitcoin-handshake/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// DecodeElements mocks base method.
func (m *MockDecoder) DecodeElements(r io.Reader, elements ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{r}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecodeElements", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeElements indicates an expected call of DecodeElements.
func (mr *MockDecoderMockRecorder) DecodeElements(r any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{r}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeElements", reflect.TypeOf((*MockDecoder)(nil).DecodeElements), varargs...)
}

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// EncodeElements mocks base method.
func (m *MockEncoder) EncodeElements(w io.Writer, elements ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{w}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EncodeElements", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeElements indicates an expected call of EncodeElements.
func (mr *MockEncoderMockRecorder) EncodeElements(w any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeElements", reflect.TypeOf((*MockEncoder)(nil).EncodeElements), varargs...)
}

// EncodeVersionMessage mocks base method.
func (m *MockEncoder) EncodeVersionMessage(w io.Writer, msg model.VersionMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeVersionMessage", w, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeVersionMessage indicates an expected call of EncodeVersionMessage.
func (mr *MockEncoderMockRecorder) EncodeVersionMessage(w, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeVersionMessage", reflect.TypeOf((*MockEncoder)(nil).EncodeVersionMessage), w, msg)
}

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GenerateNewVersionMessage mocks base method.
func (m *MockGenerator) GenerateNewVersionMessage(remoteHost string, remotePort uint16, localHost string, localPort uint16) model.VersionMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewVersionMessage", remoteHost, remotePort, localHost, localPort)
	ret0, _ := ret[0].(model.VersionMessage)
	return ret0
}

// GenerateNewVersionMessage indicates an expected call of GenerateNewVersionMessage.
func (mr *MockGeneratorMockRecorder) GenerateNewVersionMessage(remoteHost, remotePort, localHost, localPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewVersionMessage", reflect.TypeOf((*MockGenerator)(nil).GenerateNewVersionMessage), remoteHost, remotePort, localHost, localPort)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetNodeHost mocks base method.
func (m *MockClient) GetNodeHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeHost indicates an expected call of GetNodeHost.
func (mr *MockClientMockRecorder) GetNodeHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeHost", reflect.TypeOf((*MockClient)(nil).GetNodeHost))
}

// GetNodePort mocks base method.
func (m *MockClient) GetNodePort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNodePort indicates an expected call of GetNodePort.
func (mr *MockClientMockRecorder) GetNodePort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePort", reflect.TypeOf((*MockClient)(nil).GetNodePort))
}

// ReceiveMsg mocks base method.
func (m *MockClient) ReceiveMsg(ctx context.Context, headerReadFn func(*bytes.Reader) (model.MessageHeader, error), payloadReadFn func(*bytes.Reader, model.MessageHeader) (any, error), receiveCh chan model.MessageFromNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveMsg", ctx, headerReadFn, payloadReadFn, receiveCh)
}

// ReceiveMsg indicates an expected call of ReceiveMsg.
func (mr *MockClientMockRecorder) ReceiveMsg(ctx, headerReadFn, payloadReadFn, receiveCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMsg", reflect.TypeOf((*MockClient)(nil).ReceiveMsg), ctx, headerReadFn, payloadReadFn, receiveCh)
}

// Write mocks base method.
func (m *MockClient) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockClientMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClient)(nil).Write), p)
}
